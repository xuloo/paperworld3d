<?xml version="1.0" encoding="UTF-8"?>
<project name="paperworld3d" default="build-server" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant">

    <description>
      VideoJuggler Java class
    </description>
     <!-- set global properties for this build -->
     <property name="app.name" value="${ant.project.name}"/>
     <property environment="env"/>
	 
     <property name="core.src.dir" location="src/core"/>
	 <property name="demo.src.dir" location="src/demo"/>
	 
	 <property name="demo.build.dir" location="bin/demo"/>
     <property name="build.dir" location="bin"/>
	 
     <property name="dist.dir" location="dist"/>
     <property name="red5.dir" location="C:/Users/Trevor/workspace/red5_server"/>
     <property name="red5.app.dir" location="${red5.dir}/webapps/${app.name}"/>
     <property name="ivy.lib.dir" value="${build.dir}/lib"/>
     <property name="ivy.version" value="ivy-2.0.0-beta1" />

      <!--
         Ivy tasks and lib directory 
             http://ant.apache.org/ivy
             http://testearly.com/2007/06/24/ivy-in-42-steps

         In order for this to work, you need to set the right ivy JAR file into
         the lib directory of your project; all other dependencies are then managed
         by that jar file.
     -->
     <taskdef uri="antlib:org.apache.ivy.ant" resource="org/apache/ivy/ant/antlib.xml" classpath="lib/${ivy.version}.jar"/>

     <path id="classpath">
       <pathelement location="${red5.dir}/red5.jar"/>
       <pathelement location="${red5.dir}/lib/*.jar"/>
	   <pathelement location="${dist.dir}/WEB-INF/lib/${app.name}.jar"/>
     </path>

     <target name="init">
       <!-- Create the time stamp -->
       <tstamp/>
       <!-- Create the build directory structure used by compile -->
       <mkdir dir="${build.dir}"/>
	   <mkdir dir="${dist.dir}/WEB-INF/lib"/>
     </target>
	 
	 <target name="compile" depends="clean, init">
		 <antcall target="compile-core"/>
		 <antcall target="compile-demo"/>
	 </target>

     <target name="compile-core" description="compile the source " >
		 
       <!-- Compile the java code from ${src.dir} into ${build.dir} -->
       <mkdir dir="${build.dir}/classes"/>
	   
       <javac srcdir="${core.src.dir}" destdir="${build.dir}/classes" classpathref="classpath"/>
	   
       <!-- copy the logback.xml file here because I want it in our jar -->
       <copy todir="${build.dir}/classes">
         <fileset dir="config">
          <include name="logback.xml"/>
         </fileset>
       </copy>
	   
	   <jar jarfile="${dist.dir}/WEB-INF/lib/${app.name}.jar"
           basedir="${build.dir}/classes"/>

     </target>
	 
	 <target name="compile-demo">
		 <mkdir dir="${demo.build.dir}/classes"/>
		 <javac srcdir="${demo.src.dir}" destdir="${demo.build.dir}/classes" classpathref="classpath"/>
		 <jar jarfile="${dist.dir}/WEB-INF/lib/demo.jar" basedir="${demo.build.dir}/classes"/>
	 </target>

     <target name="dist" depends="compile-core" description="generate the distribution" >
       <!-- Copy over any native libraries -->
       <copy todir="${dist.dir}/WEB-INF/lib">
         <fileset dir="${build.dir}">
           <include name="**/*.so"/>
           <include name="**/*.a"/>
           <include name="**/*.dll"/>
           <include name="**/*.lib"/>
         </fileset>
       </copy>
       <!-- Copy over all the Jar files we need -->
       <copy todir="${dist.dir}/WEB-INF/lib">
         <fileset dir="lib">
           <include name="**/*.jar"/>
         </fileset>
       </copy>
       <!-- Copy everything in the config directory to the top level dir -->
       <copy todir="${dist.dir}/WEB-INF">
         <fileset dir="config">
          <include name="**/*"/>
         </fileset>
        </copy>
        <!-- Copy over Meta Data to one level up from WEB-INF directory" -->
        <copy todir="${dist.dir}">
         <fileset dir=".">
           <include name="streams/*"/>
         </fileset>
        </copy>
        <copy todir="${dist.dir}">
         <fileset dir=".">
           <include name="metadata/*"/>
         </fileset>
        </copy>
     </target>

     <target name="build-server" depends="compile, dist"
       description="insert this app into the RED5_HOME service">
       <mkdir dir="${red5.app.dir}"/>
       <copy todir="${red5.app.dir}">
         <fileset dir="${dist.dir}">
          <include name="**/*"/>
         </fileset>
        </copy>
     </target>

     <target name="clean"
           description="clean up" >
       <!-- Delete the ${build.dir} and ${dist.dir} directory trees -->
       <delete dir="${build.dir}"/>
       <delete dir="${dist.dir}"/>
       <delete dir="${red5.dir}/webapps/${app.name}"/>
     </target>
</project>
