<project name="build-paperworld" default="build" basedir="../../../">

	<property file="./src/build/user.properties"/>
	<property file="./src/client/build/build.properties"/>
		
	<taskdef resource="flexTasks.tasks" classpath="src/client/build/flex/lib/flexTasks.jar" />
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="${build.dir}/xmltask/xmltask-v1.15.1.jar"/>
	<taskdef classpath="${build.dir}/ant-contrib/ant-contrib-1.0b3.jar" resource="net/sf/antcontrib/antlib.xml"/>
	
	<target name="build">
		<antcall target="build-libraries" />
		<antcall target="build-executables" />
	</target>
	
	<target name="build-libraries">
		
		<for list="${libraries}" param="library">
			<sequential>			
				
				<echo>Building Module => @{library}</echo>
				
				<antcall target="build-library">
					<param name="src.dir" value="${@{library}.src.dir}/${src.dir.suffix}"/>
					<param name="deploy.dir" value="${@{library}.deploy.dir}"/>
					<param name="requires" value="${@{library}.requires}"/>
				</antcall>
				
			</sequential>
		</for>
		
	</target>
		
	<target name="build-library">
		
		<antcall target="create-config-file">
			<param name="src.dir" value="${src.dir}" />
			<param name="deploy.dir" value="${deploy.dir}"/>
			<param name="requires" value="${requires}" />
		</antcall>
		
		<!-- build the list of actionscript classes in the source path -->
		<path id="original.path">
			<fileset dir=".">
				<include name="${src.dir}/**/*.as"/>
			</fileset>
		</path>
		
		<!-- edit the path names to make sure they start with 'com' -->
		<path id="base.path" path="${src.dir}/"/>
		<pathconvert refid="base.path" property="base.path.prop"/>
		
		<!-- convert the directory seperators from os-specific to the '.' seperator -->
		<pathconvert refid="original.path" property="converted.path" dirsep="." pathsep=" ">
			<mapper type="glob" from="${base.path.prop}\*.as" to="*"/>
		</pathconvert>
			
		<!--echo>Source directory => ${src.dir}</echo-->
		<echo>Converted path => ${converted.path}</echo>
		<!--echo>Base path => ${converted.path}</echo-->
		
		<!-- call the compiler -->
		<antcall target="compile-compc">
			<param name="classes" value="${converted.path}"/>
			<param name="output" value="${deploy.dir}/lib/library.swc"/>
		</antcall>
		
		<unzip src="${deploy.dir}/lib/library.swc" dest="${deploy.dir}/lib"/>
		
	</target>
	
	<target name="build-executables">
		
		<for list="${executables}" param="executable">
			<sequential>			
				
				<echo>Building Module => ${@{executable}.class}</echo>
				
				<antcall target="build-executable">
					<param name="src.dir" value="${@{executable}.src}"/>
					<param name="deploy.dir" value="${@{executable}.deploy}"/>
					<param name="requires" value="${@{executable}.requires}"/>
					<param name="main.class" value="${@{executable}.src}/${@{executable}.class}" />
				</antcall>
				
			</sequential>
		</for>
		
	</target>
	
	<target name="build-executable">
		
		<antcall target="create-config-file">
			<param name="src.dir" value="${src.dir}" />
			<param name="deploy.dir" value="${deploy.dir}" />
			<param name="requires" value="${requires}" />
		</antcall>
		
		<antcall target="compile-mxmlc">
			<param name="class" value="${main.class}" />
			<param name="output" value="${deploy.dir}" />
		</antcall>
		
	</target>
	
	<target name="compile-compc" >
		<compc  
           output="${output}"
		   include-classes="${classes}"
		   optimize="${optimize}"
		   debug="${debug}"
		>
			<load-config filename="${client.build.dir}/${config.file}"/>
		</compc>
	</target>
	
	<target name="compile-mxmlc" >
		<echo>Building mxmlc - ${class} - ${output}</echo>
		<mxmlc 
			file="${class}" 
            output="${output}"
            keep-generated-actionscript="false"
            incremental="false"
			optimize="${optimize}"
			debug="${debug}"
        >
            <load-config filename="${client.build.dir}/${config.file}"/>            
            <!-- Set size of output SWF file. -->
            <default-size width="${default.width}" height="${default.height}" />
		</mxmlc>
	</target>
	
	<!-- Creates the config file for the compiler to read when building. All the source paths for all modules are added to
		 this config file. -->
	<target name="create-config-file" description="creates the config file that contains all source paths so allows all modules to build from same configuration">
		
		<echo>Creating config file: ${src.dir} => ${requires}</echo>
		
		<!-- copy the template file over and filter to include the playerglobal.swc component -->
		<copy file="${template.dir}/${config.template.file}" todir="${client.build.dir}">
			<filterset>
				<filter token="PLAYERGLOBAL" value="${playerglobal}"/>
				<filter token="FRAMEWORK" value="${framework}"/>
				<filter token="FLEX_HOME" value="${FLEX_HOME}"/>
			</filterset>
		</copy>
		
		<!-- rename the file -->
		<move file="${client.build.dir}/${config.template.file}" tofile="${client.build.dir}/${config.file}"/>
		
		<antcall target="-add-config-path">
			<param name="module" value="${basedir}/${src.dir}" />
			<param name="path.attribute" value="/${flex.config.tag}/${compiler.tag}/${source.path.tag}"/>
		</antcall>
	
		<for list="${requires}" param="required.library">
			<sequential>			
					
				<antcall target="-add-config-path">
					<param name="module" value="${basedir}/${@{required.library}.deploy.dir}/lib/library.swc" />
					<param name="path.attribute" value="/${flex.config.tag}/${compiler.tag}/${external.library.tag}"/>
				</antcall>
				
			</sequential>
		</for>

	</target>
	
	<!-- Adds a path to the flex-config file for a module (either a source-path or external-library-path element -->
	<target name="-add-config-path" description="adds a path-element to the flex config file for a module">
		<echo>adding path: ${module}</echo>
		<xmltask source="${client.build.dir}/${config.file}" 
				dest="${client.build.dir}/${config.file}"
				outputter="simple:${nodeIndent}"
		>
			<insert path="${path.attribute}" xml="${open.path.element}${module}${close.path.element}"/>
		</xmltask>
	</target>
	
	<!-- Builds the 'initialiser' - this is the tiny .swf file that is embedded in the html page and loads the PaperWorld module.
		 In a production game built on this framework the initialisation would probably be done by the site the game framework
		 is hosted within rather than by this initialiser swf -->
	<target name="build-initialiser">
		<antcall target="build-executable">
			<param name="src.dir" value="${initialiser.src}" />
			<param name="deploy.dir" value="${initialiser.deploy}" />
			<param name="requires" value="${initialiser.requires}" />
			<param name="main.class" value="${initialiser.src}/${initialiser.class}" />
		</antcall>

	</target>
	
	<!-- Documentation creation. Creates the asdocs for the core modules, edit the list attribute of the 'for' element
		 to change the target list of modules to create documentation for all modules -->
	<target name="create-docs" description="creates asdoc documentation for this module">
		
		<for list="${core.libraries}" param="library">
			<sequential>
				<echo>Creating docs from ${@{library}.src.dir}</echo>
				<antcall target="generate-asdoc">
					<param name="src.dir" value="${@{library}.src.dir}" />
					<param name="requires" value="${@{library}.requires}" />
				</antcall>
				
			</sequential>
		</for>
	</target>
	
	<target name="generate-asdoc">
		<!-- Create the config file for the library - this needs to be fed to asdoc so it can resolve compile-time references -->
		<antcall target="create-config-file">
			<param name="src.dir" value="${src.dir}/${src.dir.suffix}" />
			<param name="requires" value="${requires}" />
		</antcall>
			
		<!-- build the list of actionscript classes in the source path -->
		<path id="original.path">
			<fileset dir=".">
				<include name="${src.dir}/${src.dir.suffix}/**/*.as"/>
			</fileset>
		</path>
		
		<!-- edit the path names to make sure they start with 'com' -->
		<path id="base.path" path="${src.dir}/${src.dir.suffix}"/>
		<pathconvert refid="base.path" property="base.path.prop"/>
		
		<!-- convert the directory seperators from os-specific to the '.' seperator -->
		<pathconvert refid="original.path" property="converted.path" dirsep="." pathsep=" ">
			<mapper type="glob" from="${base.path.prop}\*.as" to="*"/>
		</pathconvert>
		
		<echo>Documenting ${converted.path}</echo>

		<exec executable="${asdoc}">
			<arg line="-doc-classes ${converted.path}" />
			<arg line="-load-config ${client.build.dir}/${config.file}" />
			<arg line="-output ${src.dir}/${doc.dir.suffix}" />
		</exec>
	</target>
	
	<target name="build-paperworld">
		<echo>${paperworld.src.dir}/${src.dir.suffix}</echo>
		<antcall target="build-library">
			<param name="src.dir" value="${paperworld.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${paperworld.deploy.dir}"/>
			<param name="requires" value="${paperworld.requires}"/>
		</antcall>
	</target>
	
	<target name="build-datastructures">
		<antcall target="build-library">
			<param name="src.dir" value="${datastructures.src.dir}"/>
			<param name="deploy.dir" value="${datastructures.deploy.dir}"/>
			<param name="requires" value="${datastructures.requires}"/>
		</antcall>
	</target>
	
	<target name="build-rpc">
		<antcall target="build-library">
			<param name="src.dir" value="${rpc.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${rpc.deploy.dir}"/>
			<param name="requires" value="${rpc.requires}"/>
		</antcall>
	</target>
	
	<target name="build-papervision">
		<antcall target="build-library">
			<param name="src.dir" value="${papervision.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${papervision.deploy.dir}"/>
			<param name="requires" value="${papervision.requires}"/>
		</antcall>
	</target>
	
	<target name="build-quakeengine">
		<antcall target="build-library">
			<param name="src.dir" value="${quakeengine.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${quakeengine.deploy.dir}"/>
			<param name="requires" value="${quakeengine.requires}"/>
		</antcall>
	</target>
	
	<target name="build-gamecore">
		<antcall target="build-library">
			<param name="src.dir" value="${gamecore.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${gamecore.deploy.dir}"/>
			<param name="requires" value="${gamecore.requires}"/>
		</antcall>
	</target>
	
	<target name="build-preloader">
		<antcall target="build-library">
			<param name="src.dir" value="${preloader.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${preloader.deploy.dir}"/>
			<param name="requires" value="${preloader.requires}"/>
		</antcall>
	</target>
	
	<target name="build-logger">
		<antcall target="build-library">
			<param name="src.dir" value="${logger.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${logger.deploy.dir}"/>
			<param name="requires" value="${logger.requires}"/>
		</antcall>
	</target>
	
	<target name="build-Aereon">
		<antcall target="build-library">
			<param name="src.dir" value="${aereon.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${aereon.deploy.dir}"/>
			<param name="requires" value="${aereon.requires}"/>
		</antcall>
	</target>
	
	<target name="build-Quake">
		<antcall target="build-library">
			<param name="src.dir" value="${quake.src.dir}/${src.dir.suffix}"/>
			<param name="deploy.dir" value="${quake.deploy.dir}"/>
			<param name="requires" value="${quake.requires}"/>
		</antcall>
	</target>
	
	<target name="build-fonts">
		<antcall target="build-executable">
			<param name="src.dir" value="${fonts.src}"/>
			<param name="deploy.dir" value="${fonts.deploy}"/>
			<param name="requires" value="${fonts.requires}"/>
			<param name="main.class" value="${fonts.class}"/>
		</antcall>
	</target>
	
	<target name="replace">
		<replace dir="src/common/" token="" value="" />
	</target>
	
	<target name="build-test">
		
		<!--antcall target="create-config-file">
			<param name="src.dir" value="${test.src}" />
			<param name="deploy.dir" value="${test.deploy}"/>
			<param name="requires" value="${test.requires}" />
		</antcall-->
		
		<mxmlc  
           output="${basedir}/${test.deploy}"
		   file="${basedir}/${test.class}"
		>
			<load-config filename="./build/${config.file}"/>
		</mxmlc>
	</target>
	
</project>