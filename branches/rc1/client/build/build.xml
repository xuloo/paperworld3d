<project name="build-paperworld-client" default="all" basedir=".">

	<property file="user.properties"/>
	<property file="build.properties"/>
	
	<taskdef resource="flexTasks.tasks" classpath="lib/flexTasks.jar" />
	<taskdef name="asdoc" classpath="lib/asdoc-ant.jar" classname="org.pranaframework.ant.Asdoc"/>

        <property name="game.dir" location="../deploy"/>
        <property name="adt.jar" location="${FLEX_HOME}/lib/adt.jar"/>
	
	<target name="all" description="builds all the paperworld libraries and generates documentation">
		
		<ant target="clean"/>
		<ant target="prepare"/>
		<ant target="build"/>
		<ant target="generate-docs"/>
		
	</target>
	
	<target name="build" depends="clean-output, prepare-output" description="builds all the paperworld client libraries and unit tests">
		
		<ant target="build-core"/>
		<ant target="build-ai"/>
		<ant target="build-multiplayer"/>
		
	</target>
	
	<target name="build-ai" description="builds the ai paperworld client library swc.">
			
		<compc output="${output.dir}/${ai.output.name}"
		   optimize="true"
		   debug="true"
		>
			<include-sources dir="${ai.src.dir}">
                 <include name="**/*.as"/>
            </include-sources>
			<compiler.source-path path-element="${ai.src.dir}"/>
			<compiler.source-path path-element="${core.src.dir}"/>
			<compiler.external-library-path dir="../lib" append="true">
				<include name="*.swc" />
			</compiler.external-library-path>
		</compc>
		
	</target>
	
	<target name="build-core" description="builds the core paperworld client library swc.">
		
		<compc output="${output.dir}/${core.output.name}"
		   optimize="true"
		   debug="true"
		>
			<include-sources dir="${core.src.dir}">
                 <include name="**/*.as"/>
            </include-sources>
			<compiler.source-path path-element="${core.src.dir}"/>
			<compiler.external-library-path dir="../lib" append="true">
				<include name="*.swc" />
			</compiler.external-library-path>
		</compc>
		
	</target>
	
	<target name="build-multiplayer" description="builds the multiplayer paperworld client library swc.">
			
		<compc output="${output.dir}/${multiplayer.output.name}"
		   optimize="true"
		   debug="true"
		>
			<include-sources dir="${multiplayer.src.dir}">
                 <include name="**/*.as"/>
            </include-sources>
			<compiler.source-path path-element="${ai.src.dir}"/>
			<compiler.source-path path-element="${core.src.dir}"/>
			<compiler.source-path path-element="${multiplayer.src.dir}"/>
			<compiler.external-library-path dir="../lib" append="true">
				<include name="*.swc" />
			</compiler.external-library-path>
		</compc>
		
	</target>
	
	<target name="build-bootstrapper" description="builds the bootstrapper swf">
		<mxmlc  
           output="../bin/bootstrapper.swf"
		   file="../src/com/paperworld/bootstrapper/Bootstrapper.as"
		   debug="${debug}"
		>
			<source-path path-element="../src/test"/>
			<source-path path-element="../src/core"/>
			<source-path path-element="../src/ai"/>
			<source-path path-element="../src/multiplayer"/>
			<source-path path-element="../src/logging"/>
			<compiler.library-path dir="../lib" append="true">
				<include name="*.swc" />
			</compiler.library-path>
			<compiler.library-path dir="${FLEX_HOME}/frameworks/libs" append="true">
				<include name="framework.swc" />
			</compiler.library-path>
			<compiler.external-library-path dir="${FLEX_HOME}/frameworks/libs/player">
				<include name="playerglobal.swc"/>
			</compiler.external-library-path>
		</mxmlc>
	</target>
	
	<target name="build-tests" description="builds the test suite and runs tests">
		<mxmlc  
           output="../src/test/test.swf"
		   file="../src/test/Test.mxml"
		   debug="true"
		>
			<source-path path-element="../src/test"/>
			<source-path path-element="../src/core"/>
			<source-path path-element="../src/ai"/>
			<source-path path-element="../src/multiplayer"/>
			<source-path path-element="../src/logging"/>
			<compiler.library-path dir="../lib" append="true">
				<include name="*.swc" />
			</compiler.library-path>
			<compiler.library-path dir="${FLEX_HOME}/frameworks/libs" append="true">
				<include name="framework.swc" />
			</compiler.library-path>
			<compiler.external-library-path dir="${FLEX_HOME}/frameworks/libs/player">
				<include name="playerglobal.swc"/>
			</compiler.external-library-path>
		</mxmlc>
	</target>
	
	<target name="generate-docs" depends="clean-docs, prepare-docs" description="creates the asdoc documentation for the project">
		
		<exec executable="${asdoc}" failonerror="true" >
		  <arg line="-doc-sources ../src/core ../src/ai ../src/multiplayer" />
		  <arg line="-external-library-path ../lib/JedaiLib.swc ../lib/prana-main.swc ../lib/datastructures.swc ../lib/flexunit.swc" />
		  <arg line="-output ../docs" />
		  <arg line="-main-title 'PaperWorld3D API Documentation'"/>
		  <arg line="-window-title 'PaperWorld3D API Documentation'"/>
		</exec>
		
	</target>
	
	<target name="prepare" description="prepares the directory system before a build">
		
		<ant target="prepare-output"/>
		<ant target="prepare-docs"/>
		
	</target>
	
	<target name="prepare-output" description="prepares the output directory">
		
		<mkdir dir="${docs.dir}"/>
		
	</target>
	
	<target name="prepare-docs" description="prepares the documentation directory">
		
		<mkdir dir="${docs.dir}"/>
		
	</target>
	
	<target name="clean" description="cleans the directory system of all directories/files created by a build">
		
		<ant target="clean-docs"/>
		<ant target="clean-output"/>	
		
	</target>
	
	<target name="clean-docs" description="cleans the documentation directory">
		
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="../docs" includes="**/*" />
		</delete>
		
	</target>
	
	<target name="clean-output" description="cleans the output directory">
		
		<delete failonerror="no" includeemptydirs="true">
			<fileset dir="../bin" includes="**/*" />
		</delete>
		
	</target>
	
</project>